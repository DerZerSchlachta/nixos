{
  config,
  lib,
  pkgs,
  ...
}:
{
  # https://github.com/3timeslazy/nix-search-tv

  programs.nix-search-tv = {
    enable = true;
    enableTelevisionIntegration = lib.mkIf config.programs.television.enable true;
    settings = {
      # What indexes to search by default
      #
      # default:
      #   linux: [nixpkgs, "home-manager", "nur", "nixos"]
      #   darwin: [nixpkgs, "home-manager", "nur", "darwin"]
      indexes = [
        "nixpkgs"
        "home-manager"
        "nixos"
        "nur"
      ];

      # How often to look for updates and run
      # indexer again
      #
      # default: 1 week (168h)
      # update_interval = "3h2m1s";

      # Where to store the index files
      #
      # default: $XDG_CACHE_HOME/nix-search-tv
      # cache_dir = "path/to/cache/dir";

      # Whether to show the banner when waiting for
      # the indexing
      #
      # default: true
      enable_waiting_message = true;

      experimental = {
        # nix-search-tv can parse and index documentation pages generated by nixos-render-docs,
        # enabling search functionality for those pages.
        render_docs_indexes = {
          plasma-manager = "https://nix-community.github.io/plasma-manager/options.xhtml";
          # nvf = "https://notashelf.github.io/nvf/options.html"; # neovim stuff
        };
      };
    };
  };

  # nushell script wrapping nix-search-tv and television and can immediately apply nix command to package
  programs.nushell.shellAliases =
    let
      nix-search-tv = lib.getExe pkgs.nix-search-tv;
      tv = lib.getExe pkgs.television;
      tv_command = "${tv} --source-command '${nix-search-tv} print' --preview-command '${nix-search-tv} preview {}'";
      ns =
        pkgs.writers.writeNuBin "nix-search-alias" # nu
          ''
            def prompt_nixpkgs (identifier, package) {
              let actions = [ "show" "nix run" "nix run (with args)" "nix shell" "nix profile install" ]
              let result = $actions | input list --fuzzy $'what do you want to do with\n($package)'
              match $result {
                "show" => { ${nix-search-tv} preview $"($identifier)/ ($package)" }
                "nix run" => { nix run nixpkgs#($package) },
                "nix run (with args)" => {
                  let args = input 'args: '
                  let args: list<string> = $args | split row " "
                  (nix run $"nixpkgs#($package)" "--" ...$args)
                },
                "nix shell" => { nix shell nixpkgs#($package) }
                "nix profile install" => { nix profile install nixpkgs#($package) }
              }
            }

            let selection = ${tv_command}
            if ($selection | is-empty) {
              return
            }
            let identifier = ($selection | split row "/" | get 0)
            let item = ($selection | parse "{_}/ {item}" | get item.0 | str trim)
            match $identifier {
              "nixpkgs" => {
                prompt_nixpkgs $identifier $item
              },
              "nixos" => { ${nix-search-tv} preview $selection },
              "home-manager" => { ${nix-search-tv} preview $selection },
              "nur" => { ${nix-search-tv} preview $selection },
              _ => { print $"($identifier)/ ($item)" }
            }
          '';
    in
    {
      ns = "${lib.getExe ns}";
    };

}